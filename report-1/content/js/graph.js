/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 993.0, "minX": 0.0, "maxY": 76380.0, "series": [{"data": [[0.0, 993.0], [0.1, 997.0], [0.2, 999.0], [0.3, 1000.0], [0.4, 1002.0], [0.5, 1002.0], [0.6, 1003.0], [0.7, 1004.0], [0.8, 1005.0], [0.9, 1006.0], [1.0, 1006.0], [1.1, 1007.0], [1.2, 1008.0], [1.3, 1009.0], [1.4, 1009.0], [1.5, 1010.0], [1.6, 1011.0], [1.7, 1011.0], [1.8, 1012.0], [1.9, 1012.0], [2.0, 1013.0], [2.1, 1013.0], [2.2, 1013.0], [2.3, 1014.0], [2.4, 1014.0], [2.5, 1014.0], [2.6, 1015.0], [2.7, 1015.0], [2.8, 1015.0], [2.9, 1016.0], [3.0, 1016.0], [3.1, 1016.0], [3.2, 1016.0], [3.3, 1016.0], [3.4, 1017.0], [3.5, 1017.0], [3.6, 1017.0], [3.7, 1017.0], [3.8, 1018.0], [3.9, 1018.0], [4.0, 1018.0], [4.1, 1018.0], [4.2, 1018.0], [4.3, 1019.0], [4.4, 1019.0], [4.5, 1019.0], [4.6, 1019.0], [4.7, 1019.0], [4.8, 1020.0], [4.9, 1020.0], [5.0, 1020.0], [5.1, 1020.0], [5.2, 1020.0], [5.3, 1021.0], [5.4, 1021.0], [5.5, 1021.0], [5.6, 1021.0], [5.7, 1021.0], [5.8, 1022.0], [5.9, 1022.0], [6.0, 1022.0], [6.1, 1022.0], [6.2, 1023.0], [6.3, 1023.0], [6.4, 1023.0], [6.5, 1023.0], [6.6, 1023.0], [6.7, 1024.0], [6.8, 1024.0], [6.9, 1024.0], [7.0, 1024.0], [7.1, 1024.0], [7.2, 1024.0], [7.3, 1025.0], [7.4, 1025.0], [7.5, 1025.0], [7.6, 1025.0], [7.7, 1026.0], [7.8, 1026.0], [7.9, 1026.0], [8.0, 1026.0], [8.1, 1027.0], [8.2, 1027.0], [8.3, 1027.0], [8.4, 1027.0], [8.5, 1027.0], [8.6, 1028.0], [8.7, 1028.0], [8.8, 1028.0], [8.9, 1028.0], [9.0, 1028.0], [9.1, 1029.0], [9.2, 1029.0], [9.3, 1029.0], [9.4, 1029.0], [9.5, 1030.0], [9.6, 1030.0], [9.7, 1030.0], [9.8, 1030.0], [9.9, 1030.0], [10.0, 1030.0], [10.1, 1031.0], [10.2, 1031.0], [10.3, 1031.0], [10.4, 1031.0], [10.5, 1031.0], [10.6, 1031.0], [10.7, 1031.0], [10.8, 1032.0], [10.9, 1032.0], [11.0, 1032.0], [11.1, 1032.0], [11.2, 1033.0], [11.3, 1033.0], [11.4, 1033.0], [11.5, 1033.0], [11.6, 1034.0], [11.7, 1034.0], [11.8, 1034.0], [11.9, 1034.0], [12.0, 1034.0], [12.1, 1034.0], [12.2, 1034.0], [12.3, 1035.0], [12.4, 1035.0], [12.5, 1035.0], [12.6, 1035.0], [12.7, 1035.0], [12.8, 1036.0], [12.9, 1036.0], [13.0, 1036.0], [13.1, 1036.0], [13.2, 1036.0], [13.3, 1036.0], [13.4, 1037.0], [13.5, 1037.0], [13.6, 1037.0], [13.7, 1037.0], [13.8, 1037.0], [13.9, 1037.0], [14.0, 1037.0], [14.1, 1038.0], [14.2, 1038.0], [14.3, 1038.0], [14.4, 1038.0], [14.5, 1038.0], [14.6, 1038.0], [14.7, 1038.0], [14.8, 1038.0], [14.9, 1039.0], [15.0, 1039.0], [15.1, 1039.0], [15.2, 1039.0], [15.3, 1039.0], [15.4, 1040.0], [15.5, 1040.0], [15.6, 1040.0], [15.7, 1040.0], [15.8, 1040.0], [15.9, 1040.0], [16.0, 1041.0], [16.1, 1041.0], [16.2, 1041.0], [16.3, 1041.0], [16.4, 1041.0], [16.5, 1041.0], [16.6, 1041.0], [16.7, 1042.0], [16.8, 1042.0], [16.9, 1042.0], [17.0, 1042.0], [17.1, 1042.0], [17.2, 1043.0], [17.3, 1043.0], [17.4, 1043.0], [17.5, 1043.0], [17.6, 1043.0], [17.7, 1043.0], [17.8, 1043.0], [17.9, 1044.0], [18.0, 1044.0], [18.1, 1044.0], [18.2, 1044.0], [18.3, 1044.0], [18.4, 1044.0], [18.5, 1044.0], [18.6, 1044.0], [18.7, 1045.0], [18.8, 1045.0], [18.9, 1045.0], [19.0, 1045.0], [19.1, 1045.0], [19.2, 1045.0], [19.3, 1045.0], [19.4, 1046.0], [19.5, 1046.0], [19.6, 1046.0], [19.7, 1046.0], [19.8, 1047.0], [19.9, 1047.0], [20.0, 1047.0], [20.1, 1047.0], [20.2, 1047.0], [20.3, 1047.0], [20.4, 1047.0], [20.5, 1048.0], [20.6, 1048.0], [20.7, 1048.0], [20.8, 1048.0], [20.9, 1048.0], [21.0, 1048.0], [21.1, 1049.0], [21.2, 1049.0], [21.3, 1049.0], [21.4, 1049.0], [21.5, 1049.0], [21.6, 1049.0], [21.7, 1050.0], [21.8, 1050.0], [21.9, 1050.0], [22.0, 1050.0], [22.1, 1050.0], [22.2, 1050.0], [22.3, 1050.0], [22.4, 1051.0], [22.5, 1051.0], [22.6, 1051.0], [22.7, 1051.0], [22.8, 1051.0], [22.9, 1051.0], [23.0, 1052.0], [23.1, 1052.0], [23.2, 1052.0], [23.3, 1052.0], [23.4, 1052.0], [23.5, 1052.0], [23.6, 1053.0], [23.7, 1053.0], [23.8, 1053.0], [23.9, 1053.0], [24.0, 1053.0], [24.1, 1053.0], [24.2, 1054.0], [24.3, 1054.0], [24.4, 1054.0], [24.5, 1054.0], [24.6, 1055.0], [24.7, 1055.0], [24.8, 1055.0], [24.9, 1055.0], [25.0, 1056.0], [25.1, 1056.0], [25.2, 1056.0], [25.3, 1056.0], [25.4, 1056.0], [25.5, 1056.0], [25.6, 1057.0], [25.7, 1057.0], [25.8, 1057.0], [25.9, 1057.0], [26.0, 1057.0], [26.1, 1058.0], [26.2, 1058.0], [26.3, 1058.0], [26.4, 1058.0], [26.5, 1059.0], [26.6, 1059.0], [26.7, 1059.0], [26.8, 1059.0], [26.9, 1060.0], [27.0, 1060.0], [27.1, 1060.0], [27.2, 1060.0], [27.3, 1061.0], [27.4, 1061.0], [27.5, 1061.0], [27.6, 1061.0], [27.7, 1061.0], [27.8, 1062.0], [27.9, 1062.0], [28.0, 1062.0], [28.1, 1063.0], [28.2, 1063.0], [28.3, 1063.0], [28.4, 1063.0], [28.5, 1063.0], [28.6, 1063.0], [28.7, 1064.0], [28.8, 1064.0], [28.9, 1064.0], [29.0, 1064.0], [29.1, 1065.0], [29.2, 1065.0], [29.3, 1065.0], [29.4, 1065.0], [29.5, 1066.0], [29.6, 1066.0], [29.7, 1066.0], [29.8, 1066.0], [29.9, 1067.0], [30.0, 1067.0], [30.1, 1067.0], [30.2, 1068.0], [30.3, 1068.0], [30.4, 1068.0], [30.5, 1068.0], [30.6, 1069.0], [30.7, 1069.0], [30.8, 1069.0], [30.9, 1070.0], [31.0, 1070.0], [31.1, 1070.0], [31.2, 1071.0], [31.3, 1071.0], [31.4, 1071.0], [31.5, 1072.0], [31.6, 1072.0], [31.7, 1072.0], [31.8, 1073.0], [31.9, 1073.0], [32.0, 1074.0], [32.1, 1074.0], [32.2, 1074.0], [32.3, 1075.0], [32.4, 1075.0], [32.5, 1076.0], [32.6, 1076.0], [32.7, 1076.0], [32.8, 1076.0], [32.9, 1077.0], [33.0, 1077.0], [33.1, 1077.0], [33.2, 1078.0], [33.3, 1078.0], [33.4, 1078.0], [33.5, 1078.0], [33.6, 1079.0], [33.7, 1079.0], [33.8, 1079.0], [33.9, 1080.0], [34.0, 1080.0], [34.1, 1081.0], [34.2, 1081.0], [34.3, 1082.0], [34.4, 1082.0], [34.5, 1082.0], [34.6, 1083.0], [34.7, 1083.0], [34.8, 1084.0], [34.9, 1084.0], [35.0, 1085.0], [35.1, 1086.0], [35.2, 1086.0], [35.3, 1087.0], [35.4, 1087.0], [35.5, 1088.0], [35.6, 1088.0], [35.7, 1089.0], [35.8, 1090.0], [35.9, 1091.0], [36.0, 1091.0], [36.1, 1092.0], [36.2, 1092.0], [36.3, 1093.0], [36.4, 1094.0], [36.5, 1095.0], [36.6, 1095.0], [36.7, 1096.0], [36.8, 1096.0], [36.9, 1097.0], [37.0, 1098.0], [37.1, 1099.0], [37.2, 1100.0], [37.3, 1101.0], [37.4, 1101.0], [37.5, 1102.0], [37.6, 1103.0], [37.7, 1103.0], [37.8, 1104.0], [37.9, 1105.0], [38.0, 1106.0], [38.1, 1107.0], [38.2, 1109.0], [38.3, 1110.0], [38.4, 1111.0], [38.5, 1112.0], [38.6, 1113.0], [38.7, 1114.0], [38.8, 1115.0], [38.9, 1115.0], [39.0, 1116.0], [39.1, 1117.0], [39.2, 1119.0], [39.3, 1120.0], [39.4, 1121.0], [39.5, 1122.0], [39.6, 1123.0], [39.7, 1124.0], [39.8, 1125.0], [39.9, 1127.0], [40.0, 1128.0], [40.1, 1129.0], [40.2, 1130.0], [40.3, 1132.0], [40.4, 1133.0], [40.5, 1135.0], [40.6, 1136.0], [40.7, 1138.0], [40.8, 1140.0], [40.9, 1140.0], [41.0, 1143.0], [41.1, 1144.0], [41.2, 1146.0], [41.3, 1148.0], [41.4, 1149.0], [41.5, 1150.0], [41.6, 1152.0], [41.7, 1153.0], [41.8, 1154.0], [41.9, 1156.0], [42.0, 1158.0], [42.1, 1160.0], [42.2, 1162.0], [42.3, 1163.0], [42.4, 1165.0], [42.5, 1168.0], [42.6, 1169.0], [42.7, 1170.0], [42.8, 1171.0], [42.9, 1172.0], [43.0, 1174.0], [43.1, 1176.0], [43.2, 1178.0], [43.3, 1179.0], [43.4, 1179.0], [43.5, 1181.0], [43.6, 1182.0], [43.7, 1183.0], [43.8, 1184.0], [43.9, 1186.0], [44.0, 1189.0], [44.1, 1190.0], [44.2, 1191.0], [44.3, 1192.0], [44.4, 1193.0], [44.5, 1194.0], [44.6, 1195.0], [44.7, 1195.0], [44.8, 1196.0], [44.9, 1197.0], [45.0, 1198.0], [45.1, 1202.0], [45.2, 1203.0], [45.3, 1204.0], [45.4, 1206.0], [45.5, 1207.0], [45.6, 1209.0], [45.7, 1211.0], [45.8, 1212.0], [45.9, 1215.0], [46.0, 1215.0], [46.1, 1215.0], [46.2, 1217.0], [46.3, 1218.0], [46.4, 1220.0], [46.5, 1222.0], [46.6, 1223.0], [46.7, 1224.0], [46.8, 1225.0], [46.9, 1227.0], [47.0, 1229.0], [47.1, 1231.0], [47.2, 1232.0], [47.3, 1237.0], [47.4, 1241.0], [47.5, 1244.0], [47.6, 1247.0], [47.7, 1248.0], [47.8, 1251.0], [47.9, 1253.0], [48.0, 1258.0], [48.1, 1265.0], [48.2, 1268.0], [48.3, 1270.0], [48.4, 1274.0], [48.5, 1276.0], [48.6, 1281.0], [48.7, 1284.0], [48.8, 1288.0], [48.9, 1305.0], [49.0, 1311.0], [49.1, 1316.0], [49.2, 1322.0], [49.3, 1326.0], [49.4, 1330.0], [49.5, 1335.0], [49.6, 1340.0], [49.7, 1347.0], [49.8, 1351.0], [49.9, 1357.0], [50.0, 1365.0], [50.1, 1367.0], [50.2, 1372.0], [50.3, 1378.0], [50.4, 1399.0], [50.5, 1411.0], [50.6, 1420.0], [50.7, 1426.0], [50.8, 1432.0], [50.9, 1445.0], [51.0, 1452.0], [51.1, 1457.0], [51.2, 1479.0], [51.3, 1483.0], [51.4, 1499.0], [51.5, 1518.0], [51.6, 1528.0], [51.7, 1533.0], [51.8, 1545.0], [51.9, 1557.0], [52.0, 1563.0], [52.1, 1565.0], [52.2, 1567.0], [52.3, 1573.0], [52.4, 1579.0], [52.5, 1586.0], [52.6, 1595.0], [52.7, 1603.0], [52.8, 1614.0], [52.9, 1618.0], [53.0, 1628.0], [53.1, 1636.0], [53.2, 1644.0], [53.3, 1658.0], [53.4, 1669.0], [53.5, 1674.0], [53.6, 1683.0], [53.7, 1690.0], [53.8, 1693.0], [53.9, 1694.0], [54.0, 1698.0], [54.1, 1706.0], [54.2, 1711.0], [54.3, 1721.0], [54.4, 1727.0], [54.5, 1733.0], [54.6, 1744.0], [54.7, 1753.0], [54.8, 1759.0], [54.9, 1763.0], [55.0, 1773.0], [55.1, 1779.0], [55.2, 1787.0], [55.3, 1792.0], [55.4, 1800.0], [55.5, 1808.0], [55.6, 1811.0], [55.7, 1818.0], [55.8, 1825.0], [55.9, 1831.0], [56.0, 1837.0], [56.1, 1841.0], [56.2, 1850.0], [56.3, 1856.0], [56.4, 1858.0], [56.5, 1866.0], [56.6, 1869.0], [56.7, 1872.0], [56.8, 1874.0], [56.9, 1876.0], [57.0, 1878.0], [57.1, 1882.0], [57.2, 1884.0], [57.3, 1886.0], [57.4, 1890.0], [57.5, 1894.0], [57.6, 1898.0], [57.7, 1899.0], [57.8, 1901.0], [57.9, 1902.0], [58.0, 1903.0], [58.1, 1905.0], [58.2, 1907.0], [58.3, 1909.0], [58.4, 1912.0], [58.5, 1915.0], [58.6, 1917.0], [58.7, 1921.0], [58.8, 1925.0], [58.9, 1928.0], [59.0, 1929.0], [59.1, 1932.0], [59.2, 1934.0], [59.3, 1936.0], [59.4, 1938.0], [59.5, 1940.0], [59.6, 1941.0], [59.7, 1942.0], [59.8, 1944.0], [59.9, 1946.0], [60.0, 1947.0], [60.1, 1948.0], [60.2, 1950.0], [60.3, 1952.0], [60.4, 1953.0], [60.5, 1955.0], [60.6, 1955.0], [60.7, 1957.0], [60.8, 1957.0], [60.9, 1959.0], [61.0, 1960.0], [61.1, 1961.0], [61.2, 1963.0], [61.3, 1964.0], [61.4, 1965.0], [61.5, 1966.0], [61.6, 1966.0], [61.7, 1968.0], [61.8, 1971.0], [61.9, 1972.0], [62.0, 1973.0], [62.1, 1974.0], [62.2, 1975.0], [62.3, 1976.0], [62.4, 1977.0], [62.5, 1979.0], [62.6, 1980.0], [62.7, 1982.0], [62.8, 1982.0], [62.9, 1984.0], [63.0, 1986.0], [63.1, 1987.0], [63.2, 1987.0], [63.3, 1990.0], [63.4, 1991.0], [63.5, 1992.0], [63.6, 1994.0], [63.7, 1995.0], [63.8, 1996.0], [63.9, 1997.0], [64.0, 1998.0], [64.1, 1999.0], [64.2, 1999.0], [64.3, 2000.0], [64.4, 2001.0], [64.5, 2003.0], [64.6, 2004.0], [64.7, 2005.0], [64.8, 2005.0], [64.9, 2007.0], [65.0, 2009.0], [65.1, 2010.0], [65.2, 2012.0], [65.3, 2013.0], [65.4, 2013.0], [65.5, 2015.0], [65.6, 2018.0], [65.7, 2019.0], [65.8, 2020.0], [65.9, 2022.0], [66.0, 2024.0], [66.1, 2025.0], [66.2, 2027.0], [66.3, 2027.0], [66.4, 2029.0], [66.5, 2032.0], [66.6, 2034.0], [66.7, 2036.0], [66.8, 2039.0], [66.9, 2043.0], [67.0, 2047.0], [67.1, 2049.0], [67.2, 2052.0], [67.3, 2053.0], [67.4, 2055.0], [67.5, 2061.0], [67.6, 2063.0], [67.7, 2067.0], [67.8, 2069.0], [67.9, 2074.0], [68.0, 2075.0], [68.1, 2076.0], [68.2, 2082.0], [68.3, 2087.0], [68.4, 2089.0], [68.5, 2094.0], [68.6, 2099.0], [68.7, 2103.0], [68.8, 2112.0], [68.9, 2122.0], [69.0, 2195.0], [69.1, 2253.0], [69.2, 2303.0], [69.3, 2377.0], [69.4, 2452.0], [69.5, 2514.0], [69.6, 2587.0], [69.7, 2613.0], [69.8, 2658.0], [69.9, 2710.0], [70.0, 2732.0], [70.1, 2745.0], [70.2, 2764.0], [70.3, 2805.0], [70.4, 2816.0], [70.5, 2824.0], [70.6, 2852.0], [70.7, 2863.0], [70.8, 2869.0], [70.9, 2876.0], [71.0, 2881.0], [71.1, 2886.0], [71.2, 2890.0], [71.3, 2894.0], [71.4, 2898.0], [71.5, 2899.0], [71.6, 2902.0], [71.7, 2903.0], [71.8, 2904.0], [71.9, 2908.0], [72.0, 2911.0], [72.1, 2913.0], [72.2, 2914.0], [72.3, 2915.0], [72.4, 2917.0], [72.5, 2920.0], [72.6, 2921.0], [72.7, 2923.0], [72.8, 2926.0], [72.9, 2929.0], [73.0, 2933.0], [73.1, 2935.0], [73.2, 2937.0], [73.3, 2939.0], [73.4, 2941.0], [73.5, 2943.0], [73.6, 2945.0], [73.7, 2947.0], [73.8, 2951.0], [73.9, 2952.0], [74.0, 2953.0], [74.1, 2954.0], [74.2, 2957.0], [74.3, 2958.0], [74.4, 2960.0], [74.5, 2960.0], [74.6, 2963.0], [74.7, 2965.0], [74.8, 2967.0], [74.9, 2969.0], [75.0, 2971.0], [75.1, 2974.0], [75.2, 2979.0], [75.3, 2985.0], [75.4, 2994.0], [75.5, 2997.0], [75.6, 2999.0], [75.7, 3006.0], [75.8, 3012.0], [75.9, 3016.0], [76.0, 3018.0], [76.1, 3022.0], [76.2, 3027.0], [76.3, 3031.0], [76.4, 3035.0], [76.5, 3038.0], [76.6, 3042.0], [76.7, 3045.0], [76.8, 3049.0], [76.9, 3055.0], [77.0, 3061.0], [77.1, 3070.0], [77.2, 3075.0], [77.3, 3082.0], [77.4, 3091.0], [77.5, 3105.0], [77.6, 3146.0], [77.7, 3194.0], [77.8, 3297.0], [77.9, 3344.0], [78.0, 3386.0], [78.1, 3444.0], [78.2, 3530.0], [78.3, 3581.0], [78.4, 3646.0], [78.5, 3715.0], [78.6, 3785.0], [78.7, 3877.0], [78.8, 3893.0], [78.9, 3903.0], [79.0, 3916.0], [79.1, 3923.0], [79.2, 3935.0], [79.3, 3945.0], [79.4, 3948.0], [79.5, 3960.0], [79.6, 3970.0], [79.7, 3973.0], [79.8, 3979.0], [79.9, 3985.0], [80.0, 3996.0], [80.1, 4000.0], [80.2, 4003.0], [80.3, 4008.0], [80.4, 4012.0], [80.5, 4017.0], [80.6, 4022.0], [80.7, 4024.0], [80.8, 4029.0], [80.9, 4031.0], [81.0, 4034.0], [81.1, 4042.0], [81.2, 4050.0], [81.3, 4061.0], [81.4, 4067.0], [81.5, 4072.0], [81.6, 4081.0], [81.7, 4085.0], [81.8, 4092.0], [81.9, 4104.0], [82.0, 4125.0], [82.1, 4143.0], [82.2, 4236.0], [82.3, 4391.0], [82.4, 4510.0], [82.5, 4565.0], [82.6, 4669.0], [82.7, 4726.0], [82.8, 4794.0], [82.9, 4879.0], [83.0, 4887.0], [83.1, 4895.0], [83.2, 4900.0], [83.3, 4902.0], [83.4, 4905.0], [83.5, 4908.0], [83.6, 4911.0], [83.7, 4913.0], [83.8, 4916.0], [83.9, 4917.0], [84.0, 4920.0], [84.1, 4923.0], [84.2, 4926.0], [84.3, 4929.0], [84.4, 4930.0], [84.5, 4932.0], [84.6, 4934.0], [84.7, 4936.0], [84.8, 4938.0], [84.9, 4940.0], [85.0, 4942.0], [85.1, 4943.0], [85.2, 4944.0], [85.3, 4946.0], [85.4, 4947.0], [85.5, 4949.0], [85.6, 4951.0], [85.7, 4952.0], [85.8, 4955.0], [85.9, 4956.0], [86.0, 4959.0], [86.1, 4962.0], [86.2, 4963.0], [86.3, 4965.0], [86.4, 4968.0], [86.5, 4969.0], [86.6, 4970.0], [86.7, 4971.0], [86.8, 4973.0], [86.9, 4977.0], [87.0, 4979.0], [87.1, 4981.0], [87.2, 4982.0], [87.3, 4984.0], [87.4, 4986.0], [87.5, 4987.0], [87.6, 4989.0], [87.7, 4991.0], [87.8, 4995.0], [87.9, 4998.0], [88.0, 5002.0], [88.1, 5006.0], [88.2, 5010.0], [88.3, 5012.0], [88.4, 5020.0], [88.5, 5025.0], [88.6, 5034.0], [88.7, 5053.0], [88.8, 5061.0], [88.9, 5070.0], [89.0, 5081.0], [89.1, 5094.0], [89.2, 5108.0], [89.3, 5149.0], [89.4, 5260.0], [89.5, 5362.0], [89.6, 5528.0], [89.7, 5677.0], [89.8, 5852.0], [89.9, 5861.0], [90.0, 5877.0], [90.1, 5887.0], [90.2, 5904.0], [90.3, 5911.0], [90.4, 5918.0], [90.5, 5926.0], [90.6, 5929.0], [90.7, 5934.0], [90.8, 5939.0], [90.9, 5949.0], [91.0, 5955.0], [91.1, 5958.0], [91.2, 5960.0], [91.3, 5963.0], [91.4, 5965.0], [91.5, 5970.0], [91.6, 5973.0], [91.7, 5979.0], [91.8, 5981.0], [91.9, 5984.0], [92.0, 5988.0], [92.1, 5991.0], [92.2, 5994.0], [92.3, 5995.0], [92.4, 6001.0], [92.5, 6004.0], [92.6, 6011.0], [92.7, 6015.0], [92.8, 6020.0], [92.9, 6029.0], [93.0, 6035.0], [93.1, 6044.0], [93.2, 6053.0], [93.3, 6064.0], [93.4, 6067.0], [93.5, 6077.0], [93.6, 6101.0], [93.7, 6114.0], [93.8, 6151.0], [93.9, 6279.0], [94.0, 6335.0], [94.1, 6448.0], [94.2, 6559.0], [94.3, 6635.0], [94.4, 6747.0], [94.5, 6832.0], [94.6, 6854.0], [94.7, 6868.0], [94.8, 6877.0], [94.9, 6884.0], [95.0, 6888.0], [95.1, 6892.0], [95.2, 6895.0], [95.3, 6899.0], [95.4, 6902.0], [95.5, 6908.0], [95.6, 6915.0], [95.7, 6919.0], [95.8, 6930.0], [95.9, 6938.0], [96.0, 6949.0], [96.1, 6954.0], [96.2, 6965.0], [96.3, 6978.0], [96.4, 6981.0], [96.5, 6988.0], [96.6, 6998.0], [96.7, 7012.0], [96.8, 7020.0], [96.9, 7025.0], [97.0, 7034.0], [97.1, 7046.0], [97.2, 7060.0], [97.3, 7079.0], [97.4, 7278.0], [97.5, 7512.0], [97.6, 7665.0], [97.7, 7811.0], [97.8, 7857.0], [97.9, 7869.0], [98.0, 7882.0], [98.1, 7894.0], [98.2, 7909.0], [98.3, 7914.0], [98.4, 7918.0], [98.5, 7925.0], [98.6, 7930.0], [98.7, 7933.0], [98.8, 7935.0], [98.9, 7938.0], [99.0, 7941.0], [99.1, 7945.0], [99.2, 7947.0], [99.3, 7953.0], [99.4, 7958.0], [99.5, 7962.0], [99.6, 7971.0], [99.7, 7976.0], [99.8, 7987.0], [99.9, 7996.0]], "isOverall": false, "label": "Add New User", "isController": true}, {"data": [[0.0, 993.0], [0.1, 997.0], [0.2, 999.0], [0.3, 1000.0], [0.4, 1002.0], [0.5, 1002.0], [0.6, 1003.0], [0.7, 1004.0], [0.8, 1005.0], [0.9, 1006.0], [1.0, 1006.0], [1.1, 1007.0], [1.2, 1008.0], [1.3, 1009.0], [1.4, 1009.0], [1.5, 1010.0], [1.6, 1011.0], [1.7, 1011.0], [1.8, 1012.0], [1.9, 1012.0], [2.0, 1013.0], [2.1, 1013.0], [2.2, 1013.0], [2.3, 1014.0], [2.4, 1014.0], [2.5, 1014.0], [2.6, 1015.0], [2.7, 1015.0], [2.8, 1015.0], [2.9, 1016.0], [3.0, 1016.0], [3.1, 1016.0], [3.2, 1016.0], [3.3, 1016.0], [3.4, 1017.0], [3.5, 1017.0], [3.6, 1017.0], [3.7, 1017.0], [3.8, 1018.0], [3.9, 1018.0], [4.0, 1018.0], [4.1, 1018.0], [4.2, 1018.0], [4.3, 1019.0], [4.4, 1019.0], [4.5, 1019.0], [4.6, 1019.0], [4.7, 1019.0], [4.8, 1020.0], [4.9, 1020.0], [5.0, 1020.0], [5.1, 1020.0], [5.2, 1020.0], [5.3, 1021.0], [5.4, 1021.0], [5.5, 1021.0], [5.6, 1021.0], [5.7, 1021.0], [5.8, 1022.0], [5.9, 1022.0], [6.0, 1022.0], [6.1, 1022.0], [6.2, 1023.0], [6.3, 1023.0], [6.4, 1023.0], [6.5, 1023.0], [6.6, 1023.0], [6.7, 1024.0], [6.8, 1024.0], [6.9, 1024.0], [7.0, 1024.0], [7.1, 1024.0], [7.2, 1024.0], [7.3, 1025.0], [7.4, 1025.0], [7.5, 1025.0], [7.6, 1025.0], [7.7, 1026.0], [7.8, 1026.0], [7.9, 1026.0], [8.0, 1026.0], [8.1, 1027.0], [8.2, 1027.0], [8.3, 1027.0], [8.4, 1027.0], [8.5, 1027.0], [8.6, 1028.0], [8.7, 1028.0], [8.8, 1028.0], [8.9, 1028.0], [9.0, 1028.0], [9.1, 1029.0], [9.2, 1029.0], [9.3, 1029.0], [9.4, 1029.0], [9.5, 1030.0], [9.6, 1030.0], [9.7, 1030.0], [9.8, 1030.0], [9.9, 1030.0], [10.0, 1030.0], [10.1, 1031.0], [10.2, 1031.0], [10.3, 1031.0], [10.4, 1031.0], [10.5, 1031.0], [10.6, 1031.0], [10.7, 1031.0], [10.8, 1032.0], [10.9, 1032.0], [11.0, 1032.0], [11.1, 1032.0], [11.2, 1033.0], [11.3, 1033.0], [11.4, 1033.0], [11.5, 1033.0], [11.6, 1034.0], [11.7, 1034.0], [11.8, 1034.0], [11.9, 1034.0], [12.0, 1034.0], [12.1, 1034.0], [12.2, 1034.0], [12.3, 1035.0], [12.4, 1035.0], [12.5, 1035.0], [12.6, 1035.0], [12.7, 1035.0], [12.8, 1036.0], [12.9, 1036.0], [13.0, 1036.0], [13.1, 1036.0], [13.2, 1036.0], [13.3, 1036.0], [13.4, 1037.0], [13.5, 1037.0], [13.6, 1037.0], [13.7, 1037.0], [13.8, 1037.0], [13.9, 1037.0], [14.0, 1037.0], [14.1, 1038.0], [14.2, 1038.0], [14.3, 1038.0], [14.4, 1038.0], [14.5, 1038.0], [14.6, 1038.0], [14.7, 1038.0], [14.8, 1038.0], [14.9, 1039.0], [15.0, 1039.0], [15.1, 1039.0], [15.2, 1039.0], [15.3, 1039.0], [15.4, 1040.0], [15.5, 1040.0], [15.6, 1040.0], [15.7, 1040.0], [15.8, 1040.0], [15.9, 1040.0], [16.0, 1041.0], [16.1, 1041.0], [16.2, 1041.0], [16.3, 1041.0], [16.4, 1041.0], [16.5, 1041.0], [16.6, 1041.0], [16.7, 1042.0], [16.8, 1042.0], [16.9, 1042.0], [17.0, 1042.0], [17.1, 1042.0], [17.2, 1043.0], [17.3, 1043.0], [17.4, 1043.0], [17.5, 1043.0], [17.6, 1043.0], [17.7, 1043.0], [17.8, 1043.0], [17.9, 1044.0], [18.0, 1044.0], [18.1, 1044.0], [18.2, 1044.0], [18.3, 1044.0], [18.4, 1044.0], [18.5, 1044.0], [18.6, 1044.0], [18.7, 1045.0], [18.8, 1045.0], [18.9, 1045.0], [19.0, 1045.0], [19.1, 1045.0], [19.2, 1045.0], [19.3, 1045.0], [19.4, 1046.0], [19.5, 1046.0], [19.6, 1046.0], [19.7, 1046.0], [19.8, 1047.0], [19.9, 1047.0], [20.0, 1047.0], [20.1, 1047.0], [20.2, 1047.0], [20.3, 1047.0], [20.4, 1047.0], [20.5, 1048.0], [20.6, 1048.0], [20.7, 1048.0], [20.8, 1048.0], [20.9, 1048.0], [21.0, 1048.0], [21.1, 1049.0], [21.2, 1049.0], [21.3, 1049.0], [21.4, 1049.0], [21.5, 1049.0], [21.6, 1049.0], [21.7, 1050.0], [21.8, 1050.0], [21.9, 1050.0], [22.0, 1050.0], [22.1, 1050.0], [22.2, 1050.0], [22.3, 1050.0], [22.4, 1051.0], [22.5, 1051.0], [22.6, 1051.0], [22.7, 1051.0], [22.8, 1051.0], [22.9, 1051.0], [23.0, 1052.0], [23.1, 1052.0], [23.2, 1052.0], [23.3, 1052.0], [23.4, 1052.0], [23.5, 1052.0], [23.6, 1053.0], [23.7, 1053.0], [23.8, 1053.0], [23.9, 1053.0], [24.0, 1053.0], [24.1, 1053.0], [24.2, 1054.0], [24.3, 1054.0], [24.4, 1054.0], [24.5, 1054.0], [24.6, 1055.0], [24.7, 1055.0], [24.8, 1055.0], [24.9, 1055.0], [25.0, 1056.0], [25.1, 1056.0], [25.2, 1056.0], [25.3, 1056.0], [25.4, 1056.0], [25.5, 1056.0], [25.6, 1057.0], [25.7, 1057.0], [25.8, 1057.0], [25.9, 1057.0], [26.0, 1057.0], [26.1, 1058.0], [26.2, 1058.0], [26.3, 1058.0], [26.4, 1058.0], [26.5, 1059.0], [26.6, 1059.0], [26.7, 1059.0], [26.8, 1059.0], [26.9, 1060.0], [27.0, 1060.0], [27.1, 1060.0], [27.2, 1060.0], [27.3, 1061.0], [27.4, 1061.0], [27.5, 1061.0], [27.6, 1061.0], [27.7, 1061.0], [27.8, 1062.0], [27.9, 1062.0], [28.0, 1062.0], [28.1, 1063.0], [28.2, 1063.0], [28.3, 1063.0], [28.4, 1063.0], [28.5, 1063.0], [28.6, 1063.0], [28.7, 1064.0], [28.8, 1064.0], [28.9, 1064.0], [29.0, 1064.0], [29.1, 1065.0], [29.2, 1065.0], [29.3, 1065.0], [29.4, 1065.0], [29.5, 1066.0], [29.6, 1066.0], [29.7, 1066.0], [29.8, 1066.0], [29.9, 1067.0], [30.0, 1067.0], [30.1, 1067.0], [30.2, 1068.0], [30.3, 1068.0], [30.4, 1068.0], [30.5, 1068.0], [30.6, 1069.0], [30.7, 1069.0], [30.8, 1069.0], [30.9, 1070.0], [31.0, 1070.0], [31.1, 1070.0], [31.2, 1071.0], [31.3, 1071.0], [31.4, 1071.0], [31.5, 1072.0], [31.6, 1072.0], [31.7, 1072.0], [31.8, 1073.0], [31.9, 1073.0], [32.0, 1074.0], [32.1, 1074.0], [32.2, 1074.0], [32.3, 1075.0], [32.4, 1075.0], [32.5, 1076.0], [32.6, 1076.0], [32.7, 1076.0], [32.8, 1076.0], [32.9, 1077.0], [33.0, 1077.0], [33.1, 1077.0], [33.2, 1078.0], [33.3, 1078.0], [33.4, 1078.0], [33.5, 1078.0], [33.6, 1079.0], [33.7, 1079.0], [33.8, 1079.0], [33.9, 1080.0], [34.0, 1080.0], [34.1, 1081.0], [34.2, 1081.0], [34.3, 1082.0], [34.4, 1082.0], [34.5, 1082.0], [34.6, 1083.0], [34.7, 1083.0], [34.8, 1084.0], [34.9, 1084.0], [35.0, 1085.0], [35.1, 1086.0], [35.2, 1086.0], [35.3, 1087.0], [35.4, 1087.0], [35.5, 1088.0], [35.6, 1088.0], [35.7, 1089.0], [35.8, 1090.0], [35.9, 1091.0], [36.0, 1091.0], [36.1, 1092.0], [36.2, 1092.0], [36.3, 1093.0], [36.4, 1094.0], [36.5, 1095.0], [36.6, 1095.0], [36.7, 1096.0], [36.8, 1096.0], [36.9, 1097.0], [37.0, 1098.0], [37.1, 1099.0], [37.2, 1100.0], [37.3, 1101.0], [37.4, 1101.0], [37.5, 1102.0], [37.6, 1103.0], [37.7, 1103.0], [37.8, 1104.0], [37.9, 1105.0], [38.0, 1106.0], [38.1, 1107.0], [38.2, 1109.0], [38.3, 1110.0], [38.4, 1111.0], [38.5, 1112.0], [38.6, 1113.0], [38.7, 1114.0], [38.8, 1115.0], [38.9, 1115.0], [39.0, 1116.0], [39.1, 1117.0], [39.2, 1119.0], [39.3, 1120.0], [39.4, 1121.0], [39.5, 1122.0], [39.6, 1123.0], [39.7, 1124.0], [39.8, 1125.0], [39.9, 1127.0], [40.0, 1128.0], [40.1, 1129.0], [40.2, 1130.0], [40.3, 1132.0], [40.4, 1133.0], [40.5, 1135.0], [40.6, 1136.0], [40.7, 1138.0], [40.8, 1140.0], [40.9, 1140.0], [41.0, 1143.0], [41.1, 1144.0], [41.2, 1146.0], [41.3, 1148.0], [41.4, 1149.0], [41.5, 1150.0], [41.6, 1152.0], [41.7, 1153.0], [41.8, 1154.0], [41.9, 1156.0], [42.0, 1158.0], [42.1, 1160.0], [42.2, 1162.0], [42.3, 1163.0], [42.4, 1165.0], [42.5, 1168.0], [42.6, 1169.0], [42.7, 1170.0], [42.8, 1171.0], [42.9, 1172.0], [43.0, 1174.0], [43.1, 1176.0], [43.2, 1178.0], [43.3, 1179.0], [43.4, 1179.0], [43.5, 1181.0], [43.6, 1182.0], [43.7, 1183.0], [43.8, 1184.0], [43.9, 1186.0], [44.0, 1189.0], [44.1, 1190.0], [44.2, 1191.0], [44.3, 1192.0], [44.4, 1193.0], [44.5, 1194.0], [44.6, 1195.0], [44.7, 1195.0], [44.8, 1196.0], [44.9, 1197.0], [45.0, 1198.0], [45.1, 1202.0], [45.2, 1203.0], [45.3, 1204.0], [45.4, 1206.0], [45.5, 1207.0], [45.6, 1209.0], [45.7, 1211.0], [45.8, 1212.0], [45.9, 1215.0], [46.0, 1215.0], [46.1, 1215.0], [46.2, 1217.0], [46.3, 1218.0], [46.4, 1220.0], [46.5, 1222.0], [46.6, 1223.0], [46.7, 1224.0], [46.8, 1225.0], [46.9, 1227.0], [47.0, 1229.0], [47.1, 1231.0], [47.2, 1232.0], [47.3, 1237.0], [47.4, 1241.0], [47.5, 1244.0], [47.6, 1247.0], [47.7, 1248.0], [47.8, 1251.0], [47.9, 1253.0], [48.0, 1258.0], [48.1, 1265.0], [48.2, 1268.0], [48.3, 1270.0], [48.4, 1274.0], [48.5, 1276.0], [48.6, 1281.0], [48.7, 1284.0], [48.8, 1288.0], [48.9, 1305.0], [49.0, 1311.0], [49.1, 1316.0], [49.2, 1322.0], [49.3, 1326.0], [49.4, 1330.0], [49.5, 1335.0], [49.6, 1340.0], [49.7, 1347.0], [49.8, 1351.0], [49.9, 1357.0], [50.0, 1365.0], [50.1, 1367.0], [50.2, 1372.0], [50.3, 1378.0], [50.4, 1399.0], [50.5, 1411.0], [50.6, 1420.0], [50.7, 1426.0], [50.8, 1432.0], [50.9, 1445.0], [51.0, 1452.0], [51.1, 1457.0], [51.2, 1479.0], [51.3, 1483.0], [51.4, 1499.0], [51.5, 1518.0], [51.6, 1528.0], [51.7, 1533.0], [51.8, 1545.0], [51.9, 1557.0], [52.0, 1563.0], [52.1, 1565.0], [52.2, 1567.0], [52.3, 1573.0], [52.4, 1579.0], [52.5, 1586.0], [52.6, 1595.0], [52.7, 1603.0], [52.8, 1614.0], [52.9, 1618.0], [53.0, 1628.0], [53.1, 1636.0], [53.2, 1644.0], [53.3, 1658.0], [53.4, 1669.0], [53.5, 1674.0], [53.6, 1683.0], [53.7, 1690.0], [53.8, 1693.0], [53.9, 1694.0], [54.0, 1698.0], [54.1, 1706.0], [54.2, 1711.0], [54.3, 1721.0], [54.4, 1727.0], [54.5, 1733.0], [54.6, 1744.0], [54.7, 1753.0], [54.8, 1759.0], [54.9, 1763.0], [55.0, 1773.0], [55.1, 1779.0], [55.2, 1787.0], [55.3, 1792.0], [55.4, 1800.0], [55.5, 1808.0], [55.6, 1811.0], [55.7, 1818.0], [55.8, 1825.0], [55.9, 1831.0], [56.0, 1837.0], [56.1, 1841.0], [56.2, 1850.0], [56.3, 1856.0], [56.4, 1858.0], [56.5, 1866.0], [56.6, 1869.0], [56.7, 1872.0], [56.8, 1874.0], [56.9, 1876.0], [57.0, 1878.0], [57.1, 1882.0], [57.2, 1884.0], [57.3, 1886.0], [57.4, 1890.0], [57.5, 1894.0], [57.6, 1898.0], [57.7, 1899.0], [57.8, 1901.0], [57.9, 1902.0], [58.0, 1903.0], [58.1, 1905.0], [58.2, 1907.0], [58.3, 1909.0], [58.4, 1912.0], [58.5, 1915.0], [58.6, 1917.0], [58.7, 1921.0], [58.8, 1925.0], [58.9, 1928.0], [59.0, 1929.0], [59.1, 1932.0], [59.2, 1934.0], [59.3, 1936.0], [59.4, 1938.0], [59.5, 1940.0], [59.6, 1941.0], [59.7, 1942.0], [59.8, 1944.0], [59.9, 1946.0], [60.0, 1947.0], [60.1, 1948.0], [60.2, 1950.0], [60.3, 1952.0], [60.4, 1953.0], [60.5, 1955.0], [60.6, 1955.0], [60.7, 1957.0], [60.8, 1957.0], [60.9, 1959.0], [61.0, 1960.0], [61.1, 1961.0], [61.2, 1963.0], [61.3, 1964.0], [61.4, 1965.0], [61.5, 1966.0], [61.6, 1966.0], [61.7, 1968.0], [61.8, 1971.0], [61.9, 1972.0], [62.0, 1973.0], [62.1, 1974.0], [62.2, 1975.0], [62.3, 1976.0], [62.4, 1977.0], [62.5, 1979.0], [62.6, 1980.0], [62.7, 1982.0], [62.8, 1982.0], [62.9, 1984.0], [63.0, 1986.0], [63.1, 1987.0], [63.2, 1987.0], [63.3, 1990.0], [63.4, 1991.0], [63.5, 1992.0], [63.6, 1994.0], [63.7, 1995.0], [63.8, 1996.0], [63.9, 1997.0], [64.0, 1998.0], [64.1, 1999.0], [64.2, 1999.0], [64.3, 2000.0], [64.4, 2001.0], [64.5, 2003.0], [64.6, 2004.0], [64.7, 2005.0], [64.8, 2005.0], [64.9, 2007.0], [65.0, 2009.0], [65.1, 2010.0], [65.2, 2012.0], [65.3, 2013.0], [65.4, 2013.0], [65.5, 2015.0], [65.6, 2018.0], [65.7, 2019.0], [65.8, 2020.0], [65.9, 2022.0], [66.0, 2024.0], [66.1, 2025.0], [66.2, 2027.0], [66.3, 2027.0], [66.4, 2029.0], [66.5, 2032.0], [66.6, 2034.0], [66.7, 2036.0], [66.8, 2039.0], [66.9, 2043.0], [67.0, 2047.0], [67.1, 2049.0], [67.2, 2052.0], [67.3, 2053.0], [67.4, 2055.0], [67.5, 2061.0], [67.6, 2063.0], [67.7, 2067.0], [67.8, 2069.0], [67.9, 2074.0], [68.0, 2075.0], [68.1, 2076.0], [68.2, 2082.0], [68.3, 2087.0], [68.4, 2089.0], [68.5, 2094.0], [68.6, 2099.0], [68.7, 2103.0], [68.8, 2112.0], [68.9, 2122.0], [69.0, 2195.0], [69.1, 2253.0], [69.2, 2303.0], [69.3, 2377.0], [69.4, 2452.0], [69.5, 2514.0], [69.6, 2587.0], [69.7, 2613.0], [69.8, 2658.0], [69.9, 2710.0], [70.0, 2732.0], [70.1, 2745.0], [70.2, 2764.0], [70.3, 2805.0], [70.4, 2816.0], [70.5, 2824.0], [70.6, 2852.0], [70.7, 2863.0], [70.8, 2869.0], [70.9, 2876.0], [71.0, 2881.0], [71.1, 2886.0], [71.2, 2890.0], [71.3, 2894.0], [71.4, 2898.0], [71.5, 2899.0], [71.6, 2902.0], [71.7, 2903.0], [71.8, 2904.0], [71.9, 2908.0], [72.0, 2911.0], [72.1, 2913.0], [72.2, 2914.0], [72.3, 2915.0], [72.4, 2917.0], [72.5, 2920.0], [72.6, 2921.0], [72.7, 2923.0], [72.8, 2926.0], [72.9, 2929.0], [73.0, 2933.0], [73.1, 2935.0], [73.2, 2937.0], [73.3, 2939.0], [73.4, 2941.0], [73.5, 2943.0], [73.6, 2945.0], [73.7, 2947.0], [73.8, 2951.0], [73.9, 2952.0], [74.0, 2953.0], [74.1, 2954.0], [74.2, 2957.0], [74.3, 2958.0], [74.4, 2960.0], [74.5, 2960.0], [74.6, 2963.0], [74.7, 2965.0], [74.8, 2967.0], [74.9, 2969.0], [75.0, 2971.0], [75.1, 2974.0], [75.2, 2979.0], [75.3, 2985.0], [75.4, 2994.0], [75.5, 2997.0], [75.6, 2999.0], [75.7, 3006.0], [75.8, 3012.0], [75.9, 3016.0], [76.0, 3018.0], [76.1, 3022.0], [76.2, 3027.0], [76.3, 3031.0], [76.4, 3035.0], [76.5, 3038.0], [76.6, 3042.0], [76.7, 3045.0], [76.8, 3049.0], [76.9, 3055.0], [77.0, 3061.0], [77.1, 3070.0], [77.2, 3075.0], [77.3, 3082.0], [77.4, 3091.0], [77.5, 3105.0], [77.6, 3146.0], [77.7, 3194.0], [77.8, 3297.0], [77.9, 3344.0], [78.0, 3386.0], [78.1, 3444.0], [78.2, 3530.0], [78.3, 3581.0], [78.4, 3646.0], [78.5, 3715.0], [78.6, 3785.0], [78.7, 3877.0], [78.8, 3893.0], [78.9, 3903.0], [79.0, 3916.0], [79.1, 3923.0], [79.2, 3935.0], [79.3, 3945.0], [79.4, 3948.0], [79.5, 3960.0], [79.6, 3970.0], [79.7, 3973.0], [79.8, 3979.0], [79.9, 3985.0], [80.0, 3996.0], [80.1, 4000.0], [80.2, 4003.0], [80.3, 4008.0], [80.4, 4012.0], [80.5, 4017.0], [80.6, 4022.0], [80.7, 4024.0], [80.8, 4029.0], [80.9, 4031.0], [81.0, 4034.0], [81.1, 4042.0], [81.2, 4050.0], [81.3, 4061.0], [81.4, 4067.0], [81.5, 4072.0], [81.6, 4081.0], [81.7, 4085.0], [81.8, 4092.0], [81.9, 4104.0], [82.0, 4125.0], [82.1, 4143.0], [82.2, 4236.0], [82.3, 4391.0], [82.4, 4510.0], [82.5, 4565.0], [82.6, 4669.0], [82.7, 4726.0], [82.8, 4794.0], [82.9, 4879.0], [83.0, 4887.0], [83.1, 4895.0], [83.2, 4900.0], [83.3, 4902.0], [83.4, 4905.0], [83.5, 4908.0], [83.6, 4911.0], [83.7, 4913.0], [83.8, 4916.0], [83.9, 4917.0], [84.0, 4920.0], [84.1, 4923.0], [84.2, 4926.0], [84.3, 4929.0], [84.4, 4930.0], [84.5, 4932.0], [84.6, 4934.0], [84.7, 4936.0], [84.8, 4938.0], [84.9, 4940.0], [85.0, 4942.0], [85.1, 4943.0], [85.2, 4944.0], [85.3, 4946.0], [85.4, 4947.0], [85.5, 4949.0], [85.6, 4951.0], [85.7, 4952.0], [85.8, 4955.0], [85.9, 4956.0], [86.0, 4959.0], [86.1, 4962.0], [86.2, 4963.0], [86.3, 4965.0], [86.4, 4968.0], [86.5, 4969.0], [86.6, 4970.0], [86.7, 4971.0], [86.8, 4973.0], [86.9, 4977.0], [87.0, 4979.0], [87.1, 4981.0], [87.2, 4982.0], [87.3, 4984.0], [87.4, 4986.0], [87.5, 4987.0], [87.6, 4989.0], [87.7, 4991.0], [87.8, 4995.0], [87.9, 4998.0], [88.0, 5002.0], [88.1, 5006.0], [88.2, 5010.0], [88.3, 5012.0], [88.4, 5020.0], [88.5, 5025.0], [88.6, 5034.0], [88.7, 5053.0], [88.8, 5061.0], [88.9, 5070.0], [89.0, 5081.0], [89.1, 5094.0], [89.2, 5108.0], [89.3, 5149.0], [89.4, 5260.0], [89.5, 5362.0], [89.6, 5528.0], [89.7, 5677.0], [89.8, 5852.0], [89.9, 5861.0], [90.0, 5877.0], [90.1, 5887.0], [90.2, 5904.0], [90.3, 5911.0], [90.4, 5918.0], [90.5, 5926.0], [90.6, 5929.0], [90.7, 5934.0], [90.8, 5939.0], [90.9, 5949.0], [91.0, 5955.0], [91.1, 5958.0], [91.2, 5960.0], [91.3, 5963.0], [91.4, 5965.0], [91.5, 5970.0], [91.6, 5973.0], [91.7, 5979.0], [91.8, 5981.0], [91.9, 5984.0], [92.0, 5988.0], [92.1, 5991.0], [92.2, 5994.0], [92.3, 5995.0], [92.4, 6001.0], [92.5, 6004.0], [92.6, 6011.0], [92.7, 6015.0], [92.8, 6020.0], [92.9, 6029.0], [93.0, 6035.0], [93.1, 6044.0], [93.2, 6053.0], [93.3, 6064.0], [93.4, 6067.0], [93.5, 6077.0], [93.6, 6101.0], [93.7, 6114.0], [93.8, 6151.0], [93.9, 6279.0], [94.0, 6335.0], [94.1, 6448.0], [94.2, 6559.0], [94.3, 6635.0], [94.4, 6747.0], [94.5, 6832.0], [94.6, 6854.0], [94.7, 6868.0], [94.8, 6877.0], [94.9, 6884.0], [95.0, 6888.0], [95.1, 6892.0], [95.2, 6895.0], [95.3, 6899.0], [95.4, 6902.0], [95.5, 6908.0], [95.6, 6915.0], [95.7, 6919.0], [95.8, 6930.0], [95.9, 6938.0], [96.0, 6949.0], [96.1, 6954.0], [96.2, 6965.0], [96.3, 6978.0], [96.4, 6981.0], [96.5, 6988.0], [96.6, 6998.0], [96.7, 7012.0], [96.8, 7020.0], [96.9, 7025.0], [97.0, 7034.0], [97.1, 7046.0], [97.2, 7060.0], [97.3, 7079.0], [97.4, 7278.0], [97.5, 7512.0], [97.6, 7665.0], [97.7, 7811.0], [97.8, 7857.0], [97.9, 7869.0], [98.0, 7882.0], [98.1, 7894.0], [98.2, 7909.0], [98.3, 7914.0], [98.4, 7918.0], [98.5, 7925.0], [98.6, 7930.0], [98.7, 7933.0], [98.8, 7935.0], [98.9, 7938.0], [99.0, 7941.0], [99.1, 7945.0], [99.2, 7947.0], [99.3, 7953.0], [99.4, 7958.0], [99.5, 7962.0], [99.6, 7971.0], [99.7, 7976.0], [99.8, 7987.0], [99.9, 7996.0]], "isOverall": false, "label": "POST Add New User", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 900.0, "maxY": 2313.0, "series": [{"data": [[900.0, 17.0], [1000.0, 2313.0], [1100.0, 489.0], [1200.0, 242.0], [1300.0, 97.0], [1400.0, 62.0], [1500.0, 77.0], [1600.0, 88.0], [1700.0, 85.0], [1800.0, 147.0], [1900.0, 405.0], [2000.0, 277.0], [2100.0, 25.0], [2300.0, 7.0], [2200.0, 10.0], [2400.0, 12.0], [2500.0, 9.0], [2600.0, 16.0], [2800.0, 77.0], [2700.0, 25.0], [2900.0, 257.0], [3000.0, 117.0], [3100.0, 14.0], [3300.0, 13.0], [3200.0, 6.0], [3400.0, 10.0], [3500.0, 10.0], [3700.0, 8.0], [3600.0, 10.0], [3800.0, 15.0], [3900.0, 75.0], [4000.0, 114.0], [4200.0, 5.0], [4100.0, 17.0], [4300.0, 5.0], [4500.0, 12.0], [4400.0, 4.0], [4600.0, 6.0], [4700.0, 9.0], [4800.0, 23.0], [76300.0, 1.0], [4900.0, 300.0], [5100.0, 13.0], [5000.0, 75.0], [5200.0, 5.0], [5300.0, 4.0], [5400.0, 5.0], [5600.0, 3.0], [5500.0, 4.0], [5800.0, 27.0], [5700.0, 4.0], [5900.0, 136.0], [6000.0, 76.0], [6100.0, 15.0], [6300.0, 7.0], [6200.0, 7.0], [6600.0, 7.0], [6500.0, 6.0], [6400.0, 6.0], [6900.0, 81.0], [6800.0, 55.0], [6700.0, 6.0], [7000.0, 45.0], [7100.0, 2.0], [7400.0, 3.0], [7200.0, 3.0], [7300.0, 2.0], [7600.0, 5.0], [7500.0, 3.0], [7800.0, 27.0], [7900.0, 114.0], [7700.0, 4.0], [8000.0, 2.0], [8300.0, 1.0]], "isOverall": false, "label": "Add New User", "isController": true}, {"data": [[900.0, 17.0], [1000.0, 2313.0], [1100.0, 489.0], [1200.0, 242.0], [1300.0, 97.0], [1400.0, 62.0], [1500.0, 77.0], [1600.0, 88.0], [1700.0, 85.0], [1800.0, 147.0], [1900.0, 405.0], [2000.0, 277.0], [2100.0, 25.0], [2300.0, 7.0], [2200.0, 10.0], [2400.0, 12.0], [2500.0, 9.0], [2600.0, 16.0], [2800.0, 77.0], [2700.0, 25.0], [2900.0, 257.0], [3000.0, 117.0], [3100.0, 14.0], [3300.0, 13.0], [3200.0, 6.0], [3400.0, 10.0], [3500.0, 10.0], [3700.0, 8.0], [3600.0, 10.0], [3800.0, 15.0], [3900.0, 75.0], [4000.0, 114.0], [4200.0, 5.0], [4100.0, 17.0], [4300.0, 5.0], [4500.0, 12.0], [4400.0, 4.0], [4600.0, 6.0], [4700.0, 9.0], [4800.0, 23.0], [76300.0, 1.0], [4900.0, 300.0], [5100.0, 13.0], [5000.0, 75.0], [5200.0, 5.0], [5300.0, 4.0], [5600.0, 3.0], [5400.0, 5.0], [5500.0, 4.0], [5800.0, 27.0], [5700.0, 4.0], [5900.0, 136.0], [6000.0, 76.0], [6100.0, 15.0], [6300.0, 7.0], [6200.0, 7.0], [6500.0, 6.0], [6600.0, 7.0], [6400.0, 6.0], [6900.0, 81.0], [6800.0, 55.0], [6700.0, 6.0], [7000.0, 45.0], [7100.0, 2.0], [7400.0, 3.0], [7200.0, 3.0], [7300.0, 2.0], [7600.0, 5.0], [7500.0, 3.0], [7800.0, 27.0], [7900.0, 114.0], [7700.0, 4.0], [8000.0, 2.0], [8300.0, 1.0]], "isOverall": false, "label": "POST Add New User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 76300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 35.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3198.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3198.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3031.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 35.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 44.07003257328986, "minX": 1.74886524E12, "maxY": 171.00862506341946, "series": [{"data": [[1.74886524E12, 44.07003257328986], [1.74886536E12, 129.34298674110246], [1.7488653E12, 171.00862506341946], [1.74886542E12, 60.71356783919603]], "isOverall": false, "label": "Spike/Peak Test for API Add New User", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74886542E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1033.0, "minX": 1.0, "maxY": 38705.5, "series": [{"data": [[2.0, 1149.6], [3.0, 1061.6666666666667], [4.0, 1043.7], [5.0, 1072.2307692307693], [6.0, 1077.8666666666668], [7.0, 1068.375], [8.0, 1047.785714285714], [9.0, 1046.7083333333335], [10.0, 1044.3499999999997], [11.0, 1058.5], [12.0, 1073.0], [13.0, 1489.8], [14.0, 1045.888888888889], [15.0, 1785.727272727273], [16.0, 1069.0500000000002], [17.0, 1033.0], [18.0, 1094.9473684210525], [19.0, 1521.0357142857144], [20.0, 1218.4166666666665], [21.0, 1083.421052631579], [22.0, 1473.8799999999999], [23.0, 1071.0454545454545], [24.0, 1139.76], [25.0, 2108.714285714286], [26.0, 1453.0], [27.0, 1106.2162162162163], [28.0, 1289.3124999999998], [29.0, 1146.8500000000004], [30.0, 1078.4705882352937], [31.0, 1061.8095238095239], [32.0, 1051.3800000000003], [33.0, 1330.2553191489365], [34.0, 1580.8292682926829], [35.0, 1197.125], [36.0, 1206.702702702703], [37.0, 1305.7142857142856], [38.0, 1183.2380952380954], [39.0, 1252.8125000000005], [40.0, 1066.7560975609754], [41.0, 1391.0681818181815], [42.0, 1086.1724137931037], [43.0, 1237.8928571428569], [44.0, 1114.1538461538457], [45.0, 1066.1833333333334], [46.0, 1266.084507042253], [47.0, 1166.727272727273], [48.0, 1049.7999999999995], [49.0, 1067.674418604651], [50.0, 1141.0880829015548], [51.0, 1242.1034482758614], [52.0, 1439.8648648648648], [53.0, 1157.4500000000003], [54.0, 1473.6078431372555], [55.0, 1392.2903225806454], [56.0, 1108.1142857142854], [57.0, 1386.7804878048778], [58.0, 1136.5588235294115], [59.0, 1521.1499999999999], [60.0, 1426.7954545454547], [61.0, 1276.6734693877552], [62.0, 1110.4375000000002], [63.0, 1119.0000000000002], [64.0, 1500.7142857142858], [65.0, 1160.948717948718], [66.0, 1129.3076923076922], [67.0, 1119.0217391304352], [68.0, 1156.449275362319], [69.0, 1759.4102564102564], [71.0, 1267.0144927536232], [70.0, 1566.6499999999999], [72.0, 1471.6756756756756], [73.0, 1342.6666666666665], [74.0, 1819.0], [75.0, 1179.2352941176473], [76.0, 1751.1379310344828], [77.0, 1461.4210526315792], [78.0, 1205.2424242424245], [79.0, 1649.5555555555557], [81.0, 2144.8], [82.0, 1194.2749999999999], [83.0, 1594.53125], [80.0, 1985.0], [86.0, 1925.7241379310346], [87.0, 1428.1136363636363], [84.0, 1591.7499999999998], [85.0, 1665.5238095238096], [88.0, 1634.9130434782612], [91.0, 1826.5434782608697], [90.0, 2028.4], [89.0, 1890.8], [92.0, 1568.9166666666665], [93.0, 1428.4736842105262], [94.0, 1921.6296296296296], [95.0, 2272.7142857142853], [96.0, 1952.7450980392152], [97.0, 1864.4], [98.0, 2376.214285714286], [99.0, 2227.8888888888887], [100.0, 1856.8421052631584], [102.0, 4279.166666666666], [101.0, 1533.1944444444443], [103.0, 1647.0714285714284], [104.0, 1374.090909090909], [105.0, 1390.9696969696968], [106.0, 1068.5714285714287], [107.0, 2569.125], [108.0, 2510.4285714285716], [109.0, 3356.3846153846152], [110.0, 1175.0], [111.0, 1921.8333333333333], [114.0, 5042.0], [113.0, 4455.5], [112.0, 1599.153846153846], [115.0, 4012.6666666666665], [119.0, 5002.0], [118.0, 5013.0], [117.0, 2367.6666666666665], [116.0, 6019.0], [123.0, 2955.75], [122.0, 2034.7500000000002], [120.0, 3844.625], [121.0, 2007.4285714285713], [124.0, 2461.5714285714284], [125.0, 2057.071428571429], [126.0, 1833.2894736842109], [127.0, 2864.363636363636], [134.0, 5507.0], [130.0, 6434.5], [131.0, 1929.7291666666665], [135.0, 4945.0], [133.0, 3574.5], [132.0, 4090.8], [129.0, 4117.333333333333], [141.0, 2527.408163265307], [139.0, 6276.333333333334], [143.0, 4959.0], [140.0, 1962.5], [138.0, 3740.7], [136.0, 3009.5], [144.0, 2951.0], [145.0, 2543.4375000000005], [146.0, 2430.4444444444443], [149.0, 6619.666666666667], [151.0, 2943.934782608695], [150.0, 4350.0], [148.0, 3635.0], [156.0, 6923.0], [152.0, 2245.4999999999995], [158.0, 2764.7], [159.0, 4390.75], [157.0, 3785.4], [155.0, 2028.0], [154.0, 2022.5], [153.0, 2040.6666666666667], [164.0, 2803.166666666667], [165.0, 3157.631578947369], [166.0, 3398.0], [167.0, 4417.5], [163.0, 7062.222222222222], [161.0, 3032.906976744186], [162.0, 2450.7142857142862], [160.0, 4950.0], [174.0, 7030.0], [173.0, 5913.0], [172.0, 2236.1818181818185], [171.0, 2899.0789473684213], [170.0, 3321.6666666666665], [168.0, 7421.75], [169.0, 3249.5000000000005], [175.0, 2440.142857142857], [183.0, 4737.25], [181.0, 3348.025], [179.0, 6244.0], [176.0, 4454.0], [182.0, 2839.2352941176478], [180.0, 5416.5], [178.0, 4947.625], [184.0, 2686.333333333334], [185.0, 3239.7391304347825], [186.0, 2349.95], [191.0, 3268.6181818181817], [188.0, 4154.272727272727], [190.0, 4930.5], [187.0, 4936.0], [198.0, 4133.0], [197.0, 3876.642857142857], [196.0, 3446.375], [195.0, 5215.857142857142], [194.0, 3447.3636363636365], [193.0, 6442.5], [192.0, 3899.1875], [199.0, 4968.666666666667], [204.0, 2896.25], [205.0, 3004.45], [206.0, 2990.294117647059], [207.0, 6949.5], [203.0, 7300.333333333333], [200.0, 4473.333333333334], [201.0, 3175.9444444444466], [215.0, 7306.666666666667], [212.0, 6924.5], [210.0, 7280.333333333333], [223.0, 6957.0], [222.0, 5956.0], [221.0, 7940.0], [219.0, 5987.0], [218.0, 5967.333333333333], [224.0, 3305.4545454545455], [225.0, 3362.7500000000005], [226.0, 3289.1176470588234], [231.0, 5032.0], [230.0, 5963.0], [228.0, 5031.0], [227.0, 5962.0], [239.0, 6000.0], [238.0, 7928.0], [237.0, 7949.5], [236.0, 5961.0], [235.0, 7925.0], [234.0, 7932.0], [233.0, 5942.0], [232.0, 5948.0], [245.0, 3398.6153846153848], [246.0, 3683.777777777778], [247.0, 3832.5], [244.0, 7919.0], [243.0, 6002.0], [242.0, 5979.0], [241.0, 5988.0], [240.0, 7955.0], [255.0, 5988.0], [254.0, 5998.0], [253.0, 6008.0], [252.0, 5970.5], [250.0, 6011.0], [249.0, 6004.0], [248.0, 7938.0], [271.0, 7932.0], [264.0, 4156.8], [265.0, 4022.461538461539], [266.0, 3684.5263157894738], [270.0, 7948.0], [269.0, 7924.0], [268.0, 7952.0], [259.0, 7934.0], [258.0, 6001.0], [257.0, 7928.0], [256.0, 5994.0], [267.0, 6015.0], [263.0, 5980.0], [262.0, 7946.0], [261.0, 5999.5], [286.0, 4081.9090909090905], [284.0, 4256.058823529412], [287.0, 3949.4], [285.0, 6051.0], [283.0, 6015.0], [281.0, 7987.0], [280.0, 6421.0], [278.0, 5988.0], [273.0, 7996.0], [272.0, 6878.0], [275.0, 8315.0], [274.0, 7996.0], [277.0, 5975.0], [276.0, 7995.0], [303.0, 7943.5], [301.0, 6961.75], [298.0, 7946.0], [297.0, 7609.333333333333], [292.0, 7939.0], [291.0, 7253.25], [290.0, 6444.333333333333], [288.0, 6002.0], [307.0, 4127.333333333333], [304.0, 4683.526315789474], [305.0, 5110.363636363636], [306.0, 4064.105263157895], [319.0, 7950.0], [317.0, 7930.25], [314.0, 7985.5], [312.0, 7933.5], [310.0, 7931.5], [308.0, 7929.0], [327.0, 6874.0], [325.0, 4505.0], [324.0, 4842.285714285715], [334.0, 6482.333333333333], [333.0, 6863.25], [323.0, 6886.0], [321.0, 6916.0], [320.0, 6899.0], [331.0, 7052.0], [330.0, 6624.4], [328.0, 6884.0], [326.0, 6888.666666666667], [350.0, 6900.0], [345.0, 5220.185185185185], [346.0, 4847.882352941176], [351.0, 6884.0], [349.0, 7129.0], [348.0, 6406.0], [347.0, 7080.5], [343.0, 7968.5], [339.0, 7991.5], [337.0, 7791.875], [342.0, 7958.333333333333], [365.0, 4956.3170731707305], [364.0, 5969.565217391305], [354.0, 7975.0], [353.0, 7977.0], [352.0, 6897.25], [366.0, 6902.0], [362.0, 6432.599999999999], [361.0, 6809.25], [360.0, 5993.5], [359.0, 7063.0], [358.0, 7933.0], [357.0, 7959.333333333333], [380.0, 7289.4], [377.0, 7451.5], [376.0, 7248.333333333333], [372.0, 7694.0], [369.0, 7381.5], [368.0, 6833.75], [398.0, 6620.545454545455], [385.0, 5896.2], [384.0, 7285.4], [391.0, 6073.0], [390.0, 6984.0], [389.0, 7015.0], [388.0, 7047.0], [386.0, 5896.052631578947], [387.0, 5629.5], [399.0, 6520.785714285714], [396.0, 6951.666666666667], [395.0, 6951.4], [394.0, 6809.777777777777], [393.0, 6169.666666666667], [392.0, 6203.428571428572], [400.0, 6118.79651162791], [1.0, 38705.5]], "isOverall": false, "label": "Add New User", "isController": true}, {"data": [[123.55587484035745, 2404.1574074074056]], "isOverall": false, "label": "Add New User-Aggregated", "isController": true}, {"data": [[2.0, 1149.6], [3.0, 1061.6666666666667], [4.0, 1043.7], [5.0, 1072.2307692307693], [6.0, 1077.8666666666668], [7.0, 1068.375], [8.0, 1047.785714285714], [9.0, 1046.7083333333335], [10.0, 1044.3499999999997], [11.0, 1058.5], [12.0, 1073.0], [13.0, 1489.8], [14.0, 1045.888888888889], [15.0, 1785.727272727273], [16.0, 1069.0500000000002], [17.0, 1033.0], [18.0, 1094.9473684210525], [19.0, 1521.0357142857144], [20.0, 1218.4166666666665], [21.0, 1083.421052631579], [22.0, 1473.8799999999999], [23.0, 1071.0], [24.0, 1139.76], [25.0, 2108.714285714286], [26.0, 1453.0], [27.0, 1106.2162162162165], [28.0, 1289.3124999999998], [29.0, 1146.8500000000004], [30.0, 1078.4705882352937], [31.0, 1061.8095238095239], [32.0, 1051.3800000000003], [33.0, 1330.2553191489365], [34.0, 1580.8292682926829], [35.0, 1197.125], [36.0, 1206.702702702703], [37.0, 1305.7142857142853], [38.0, 1183.2380952380954], [39.0, 1252.8125000000005], [40.0, 1066.7560975609754], [41.0, 1391.0681818181815], [42.0, 1086.1724137931037], [43.0, 1237.8928571428569], [44.0, 1114.1538461538457], [45.0, 1066.1833333333336], [46.0, 1266.084507042253], [47.0, 1166.727272727273], [48.0, 1049.7999999999995], [49.0, 1067.674418604651], [50.0, 1141.0880829015548], [51.0, 1242.1034482758616], [52.0, 1439.8648648648648], [53.0, 1157.45], [54.0, 1473.6078431372555], [55.0, 1392.2903225806454], [56.0, 1108.1142857142854], [57.0, 1386.7804878048778], [58.0, 1136.5588235294115], [59.0, 1521.1499999999999], [60.0, 1426.7954545454547], [61.0, 1276.6734693877552], [62.0, 1110.4375000000002], [63.0, 1119.0000000000002], [64.0, 1500.7142857142858], [65.0, 1160.948717948718], [66.0, 1129.307692307692], [67.0, 1119.0217391304352], [68.0, 1156.4492753623192], [69.0, 1759.4102564102564], [71.0, 1267.0144927536237], [70.0, 1566.6500000000003], [72.0, 1471.6756756756756], [73.0, 1342.6666666666665], [74.0, 1819.0], [75.0, 1179.2352941176473], [76.0, 1751.1379310344828], [77.0, 1461.4210526315792], [78.0, 1205.2424242424245], [79.0, 1649.5555555555557], [81.0, 2144.7999999999997], [82.0, 1194.2749999999999], [83.0, 1594.53125], [80.0, 1985.0], [86.0, 1925.7241379310346], [87.0, 1428.1136363636363], [84.0, 1591.75], [85.0, 1665.5238095238096], [88.0, 1634.913043478261], [91.0, 1826.5434782608697], [90.0, 2028.4], [89.0, 1890.8], [92.0, 1568.9166666666665], [93.0, 1428.4736842105262], [94.0, 1921.6296296296296], [95.0, 2272.7142857142853], [96.0, 1952.7450980392152], [97.0, 1864.4], [98.0, 2376.214285714286], [99.0, 2227.8888888888887], [100.0, 1856.8421052631577], [102.0, 4279.166666666667], [101.0, 1533.1944444444441], [103.0, 1647.0714285714284], [104.0, 1374.090909090909], [105.0, 1390.969696969697], [106.0, 1068.5714285714287], [107.0, 2569.125], [108.0, 2510.4285714285716], [109.0, 3356.3846153846152], [110.0, 1175.0], [111.0, 1921.8333333333335], [114.0, 5042.0], [113.0, 4455.5], [112.0, 1599.153846153846], [115.0, 4012.6666666666665], [119.0, 5002.0], [118.0, 5013.0], [117.0, 2367.6666666666665], [116.0, 6019.0], [123.0, 2955.75], [122.0, 2034.7500000000002], [120.0, 3844.625], [121.0, 2007.4285714285713], [124.0, 2461.571428571429], [125.0, 2057.0714285714284], [126.0, 1833.2894736842106], [127.0, 2864.363636363636], [134.0, 5507.0], [130.0, 6434.5], [131.0, 1929.7291666666667], [135.0, 4945.0], [133.0, 3574.5], [132.0, 4090.8], [129.0, 4117.333333333333], [141.0, 2527.408163265307], [139.0, 6276.333333333334], [143.0, 4959.0], [140.0, 1962.5], [138.0, 3740.7], [136.0, 3009.5], [144.0, 2951.0], [145.0, 2543.4375], [146.0, 2430.444444444445], [149.0, 6619.666666666667], [151.0, 2943.9347826086955], [150.0, 4350.0], [148.0, 3635.0], [156.0, 6923.0], [152.0, 2245.5], [158.0, 2764.7], [159.0, 4390.75], [157.0, 3785.4], [155.0, 2028.0], [154.0, 2022.5], [153.0, 2040.6666666666667], [164.0, 2803.1666666666665], [165.0, 3157.631578947369], [166.0, 3398.0], [167.0, 4417.5], [163.0, 7062.222222222223], [161.0, 3032.906976744186], [162.0, 2450.7142857142862], [160.0, 4950.0], [174.0, 7030.0], [173.0, 5913.0], [172.0, 2236.181818181818], [171.0, 2899.078947368421], [170.0, 3321.6666666666665], [168.0, 7421.75], [169.0, 3249.5000000000005], [175.0, 2440.142857142857], [183.0, 4737.25], [181.0, 3348.025], [179.0, 6244.0], [176.0, 4454.0], [182.0, 2839.2352941176478], [180.0, 5416.5], [178.0, 4947.625], [184.0, 2686.333333333334], [185.0, 3239.739130434783], [186.0, 2349.95], [191.0, 3268.6181818181817], [188.0, 4154.272727272727], [190.0, 4930.5], [187.0, 4936.0], [198.0, 4133.0], [197.0, 3876.642857142857], [196.0, 3446.375], [195.0, 5215.857142857142], [194.0, 3447.3636363636365], [193.0, 6442.5], [192.0, 3899.1875], [199.0, 4968.666666666667], [204.0, 2896.25], [205.0, 3004.45], [206.0, 2990.2941176470586], [207.0, 6949.5], [203.0, 7300.333333333333], [200.0, 4473.333333333334], [201.0, 3175.944444444446], [215.0, 7306.666666666667], [212.0, 6924.5], [210.0, 7280.333333333333], [223.0, 6957.0], [222.0, 5956.0], [221.0, 7940.0], [219.0, 5987.0], [218.0, 5967.333333333333], [224.0, 3305.4545454545455], [225.0, 3362.7500000000005], [226.0, 3289.1176470588234], [231.0, 5032.0], [230.0, 5963.0], [228.0, 5031.0], [227.0, 5962.0], [239.0, 6000.0], [238.0, 7928.0], [237.0, 7949.5], [236.0, 5961.0], [235.0, 7925.0], [234.0, 7932.0], [233.0, 5942.0], [232.0, 5948.0], [245.0, 3398.6153846153848], [246.0, 3683.777777777778], [247.0, 3832.5], [244.0, 7919.0], [243.0, 6002.0], [242.0, 5979.0], [241.0, 5988.0], [240.0, 7955.0], [255.0, 5988.0], [254.0, 5998.0], [253.0, 6008.0], [252.0, 5970.5], [250.0, 6011.0], [249.0, 6004.0], [248.0, 7938.0], [271.0, 7932.0], [264.0, 4156.8], [265.0, 4022.461538461539], [266.0, 3684.5263157894738], [270.0, 7948.0], [269.0, 7924.0], [268.0, 7952.0], [259.0, 7934.0], [258.0, 6001.0], [257.0, 7928.0], [256.0, 5994.0], [267.0, 6015.0], [263.0, 5980.0], [262.0, 7946.0], [261.0, 5999.5], [286.0, 4081.9090909090905], [284.0, 4256.058823529411], [287.0, 3949.4], [285.0, 6051.0], [283.0, 6015.0], [281.0, 7987.0], [280.0, 6421.0], [278.0, 5988.0], [273.0, 7996.0], [272.0, 6878.0], [275.0, 8315.0], [274.0, 7996.0], [277.0, 5975.0], [276.0, 7995.0], [303.0, 7943.5], [301.0, 6961.75], [298.0, 7946.0], [297.0, 7609.333333333334], [292.0, 7939.0], [291.0, 7253.25], [290.0, 6444.333333333333], [288.0, 6002.0], [307.0, 4127.333333333333], [304.0, 4683.526315789474], [305.0, 5110.363636363636], [306.0, 4064.105263157895], [319.0, 7950.0], [317.0, 7930.25], [314.0, 7985.5], [312.0, 7933.5], [310.0, 7931.5], [308.0, 7929.0], [327.0, 6874.0], [325.0, 4505.0], [324.0, 4842.285714285715], [334.0, 6482.333333333333], [333.0, 6863.25], [323.0, 6886.0], [321.0, 6916.0], [320.0, 6899.0], [331.0, 7052.0], [330.0, 6624.4], [328.0, 6884.0], [326.0, 6888.666666666667], [350.0, 6900.0], [345.0, 5220.185185185185], [346.0, 4847.882352941176], [351.0, 6884.0], [349.0, 7129.0], [348.0, 6406.0], [347.0, 7080.5], [343.0, 7968.5], [339.0, 7991.5], [337.0, 7791.874999999999], [342.0, 7958.333333333333], [365.0, 4956.3170731707305], [364.0, 5969.565217391306], [354.0, 7975.0], [353.0, 7977.0], [352.0, 6897.25], [366.0, 6902.0], [362.0, 6432.599999999999], [361.0, 6809.25], [360.0, 5993.5], [359.0, 7063.0], [358.0, 7933.0], [357.0, 7959.333333333333], [380.0, 7289.4], [377.0, 7451.5], [376.0, 7248.333333333333], [372.0, 7694.0], [369.0, 7381.5], [368.0, 6833.75], [398.0, 6620.545454545455], [385.0, 5896.2], [384.0, 7285.4], [391.0, 6073.0], [390.0, 6984.0], [389.0, 7015.0], [388.0, 7047.0], [386.0, 5896.0526315789475], [387.0, 5629.5], [399.0, 6520.785714285714], [396.0, 6951.666666666667], [395.0, 6951.4], [394.0, 6809.777777777777], [393.0, 6169.666666666667], [392.0, 6203.428571428572], [400.0, 6118.796511627912], [1.0, 38705.5]], "isOverall": false, "label": "POST Add New User", "isController": false}, {"data": [[123.55587484035745, 2404.1572477650043]], "isOverall": false, "label": "POST Add New User-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1122.8666666666666, "minX": 1.74886524E12, "maxY": 60630.73333333333, "series": [{"data": [[1.74886524E12, 26022.683333333334], [1.74886536E12, 60630.73333333333], [1.7488653E12, 41797.71666666667], [1.74886542E12, 4270.216666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74886524E12, 6829.9], [1.74886536E12, 15908.2], [1.7488653E12, 10957.283333333333], [1.74886542E12, 1122.8666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74886542E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1050.859934853419, "minX": 1.74886524E12, "maxY": 2799.825374695016, "series": [{"data": [[1.74886524E12, 1050.8607491856662], [1.74886536E12, 2799.825374695016], [1.7488653E12, 2673.8280060882803], [1.74886542E12, 2379.443877551022]], "isOverall": false, "label": "Add New User", "isController": true}, {"data": [[1.74886524E12, 1050.859934853419], [1.74886536E12, 2798.2382116660856], [1.7488653E12, 2673.8280060882803], [1.74886542E12, 2414.425742574259]], "isOverall": false, "label": "POST Add New User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74886542E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1050.8395765472283, "minX": 1.74886524E12, "maxY": 2799.8145695364215, "series": [{"data": [[1.74886524E12, 1050.8395765472283], [1.74886536E12, 2799.8145695364215], [1.7488653E12, 2673.816336884829], [1.74886542E12, 2379.4336734693898]], "isOverall": false, "label": "Add New User", "isController": true}, {"data": [[1.74886524E12, 1050.8395765472285], [1.74886536E12, 2798.227383863079], [1.7488653E12, 2673.81633688483], [1.74886542E12, 2414.4158415841584]], "isOverall": false, "label": "POST Add New User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74886542E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 736.7785016286651, "minX": 1.74886524E12, "maxY": 1119.0153061224487, "series": [{"data": [[1.74886524E12, 736.7785016286651], [1.74886536E12, 776.5928895085398], [1.7488653E12, 746.8548959918841], [1.74886542E12, 1119.0153061224487]], "isOverall": false, "label": "Add New User", "isController": true}, {"data": [[1.74886524E12, 736.7785016286653], [1.74886536E12, 776.6804051694031], [1.7488653E12, 746.8548959918838], [1.74886542E12, 1107.6039603960392]], "isOverall": false, "label": "POST Add New User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74886542E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 993.0, "minX": 1.74886524E12, "maxY": 76380.0, "series": [{"data": [[1.74886524E12, 2000.0], [1.74886536E12, 8315.0], [1.7488653E12, 7079.0], [1.74886542E12, 76380.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74886524E12, 993.0], [1.74886536E12, 993.0], [1.7488653E12, 996.0], [1.74886542E12, 1004.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74886524E12, 1079.0], [1.74886536E12, 6857.900000000001], [1.7488653E12, 5325.700000000002], [1.74886542E12, 3897.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74886524E12, 1308.78], [1.74886536E12, 7964.06], [1.7488653E12, 7000.589999999999], [1.74886542E12, 4054.55]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74886524E12, 1044.0], [1.74886536E12, 1954.0], [1.7488653E12, 1940.5], [1.74886542E12, 1936.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.74886524E12, 1098.0], [1.74886536E12, 7838.4000000000015], [1.7488653E12, 6059.549999999999], [1.74886542E12, 3957.8]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74886542E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1008.0, "minX": 1.0, "maxY": 6919.0, "series": [{"data": [[2.0, 1027.5], [3.0, 1030.0], [4.0, 1034.5], [5.0, 1038.5], [6.0, 1093.0], [7.0, 1051.0], [8.0, 1032.5], [9.0, 1038.0], [10.0, 1037.0], [12.0, 1043.0], [14.0, 1037.0], [16.0, 1174.0], [17.0, 1037.0], [18.0, 1072.5], [19.0, 1025.0], [21.0, 1040.0], [22.0, 1040.5], [23.0, 1038.0], [26.0, 1028.5], [27.0, 1038.0], [28.0, 1045.0], [29.0, 1043.0], [30.0, 1038.5], [31.0, 2238.5], [33.0, 1280.5], [32.0, 1074.5], [35.0, 1186.0], [34.0, 1102.0], [37.0, 1048.0], [36.0, 5079.0], [38.0, 1057.0], [41.0, 1585.5], [42.0, 1052.0], [43.0, 1072.0], [44.0, 1070.0], [45.0, 1926.0], [46.0, 1070.0], [47.0, 4940.0], [48.0, 1051.5], [49.0, 1119.0], [50.0, 1959.0], [51.0, 4926.5], [53.0, 1107.5], [52.0, 1422.0], [54.0, 1317.5], [55.0, 1826.5], [57.0, 4980.5], [56.0, 6072.0], [58.0, 4947.5], [59.0, 1230.0], [60.0, 2149.5], [61.0, 1107.0], [62.0, 3311.0], [63.0, 2021.5], [66.0, 6919.0], [65.0, 1842.5], [68.0, 3338.0], [70.0, 2970.0], [79.0, 5984.0], [80.0, 2072.0], [92.0, 5969.0], [1.0, 1059.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[34.0, 1996.0], [35.0, 1227.0], [36.0, 1036.0], [38.0, 1121.0], [43.0, 1955.0], [42.0, 1008.0], [45.0, 1045.0], [46.0, 2485.0], [48.0, 1023.0], [49.0, 1562.0], [50.0, 1049.0], [51.0, 1965.0], [52.0, 1943.0], [55.0, 1048.0], [56.0, 1101.0], [57.0, 3972.0], [59.0, 1105.5], [60.0, 1374.0], [66.0, 4001.0], [17.0, 1034.0], [6.0, 1012.0], [29.0, 1037.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 92.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1008.0, "minX": 1.0, "maxY": 6919.0, "series": [{"data": [[2.0, 1027.5], [3.0, 1030.0], [4.0, 1034.5], [5.0, 1038.5], [6.0, 1093.0], [7.0, 1051.0], [8.0, 1032.5], [9.0, 1038.0], [10.0, 1037.0], [12.0, 1043.0], [14.0, 1037.0], [16.0, 1174.0], [17.0, 1037.0], [18.0, 1072.5], [19.0, 1025.0], [21.0, 1040.0], [22.0, 1040.5], [23.0, 1038.0], [26.0, 1028.5], [27.0, 1038.0], [28.0, 1045.0], [29.0, 1043.0], [30.0, 1038.5], [31.0, 2238.5], [33.0, 1280.5], [32.0, 1074.5], [35.0, 1186.0], [34.0, 1102.0], [37.0, 1048.0], [36.0, 5079.0], [38.0, 1057.0], [41.0, 1585.5], [42.0, 1052.0], [43.0, 1072.0], [44.0, 1070.0], [45.0, 1926.0], [46.0, 1070.0], [47.0, 4940.0], [48.0, 1051.5], [49.0, 1119.0], [50.0, 1959.0], [51.0, 4926.5], [53.0, 1107.5], [52.0, 1422.0], [54.0, 1317.5], [55.0, 1826.5], [57.0, 4980.5], [56.0, 6072.0], [58.0, 4947.5], [59.0, 1230.0], [60.0, 2149.5], [61.0, 1107.0], [62.0, 3311.0], [63.0, 2021.5], [66.0, 6919.0], [65.0, 1842.5], [68.0, 3338.0], [70.0, 2970.0], [79.0, 5984.0], [80.0, 2071.5], [92.0, 5969.0], [1.0, 1059.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[34.0, 1996.0], [35.0, 1227.0], [36.0, 1036.0], [38.0, 1121.0], [43.0, 1955.0], [42.0, 1008.0], [45.0, 1045.0], [46.0, 2485.0], [48.0, 1023.0], [49.0, 1562.0], [50.0, 1049.0], [51.0, 1965.0], [52.0, 1943.0], [55.0, 1048.0], [56.0, 1101.0], [57.0, 3972.0], [59.0, 1105.5], [60.0, 1374.0], [66.0, 4001.0], [17.0, 1034.0], [6.0, 1012.0], [29.0, 1037.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 92.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.5666666666666667, "minX": 1.74886524E12, "maxY": 42.88333333333333, "series": [{"data": [[1.74886524E12, 21.716666666666665], [1.74886536E12, 42.88333333333333], [1.7488653E12, 38.233333333333334], [1.74886542E12, 1.5666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74886542E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.74886524E12, "maxY": 47.43333333333333, "series": [{"data": [[1.74886524E12, 20.35], [1.74886536E12, 47.43333333333333], [1.7488653E12, 32.7], [1.74886542E12, 3.3333333333333335]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.74886524E12, 0.11666666666666667], [1.74886536E12, 0.2833333333333333], [1.7488653E12, 0.15], [1.74886542E12, 0.03333333333333333]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74886542E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.74886524E12, "maxY": 47.53333333333333, "series": [{"data": [[1.74886524E12, 0.11666666666666667], [1.74886536E12, 0.2833333333333333], [1.7488653E12, 0.15], [1.74886542E12, 0.03333333333333333]], "isOverall": false, "label": "Add New User-failure", "isController": true}, {"data": [[1.74886524E12, 20.35], [1.74886536E12, 47.43333333333333], [1.7488653E12, 32.7], [1.74886542E12, 3.3333333333333335]], "isOverall": false, "label": "POST Add New User-success", "isController": false}, {"data": [[1.74886524E12, 0.11666666666666667], [1.74886536E12, 0.2833333333333333], [1.7488653E12, 0.15], [1.74886542E12, 0.03333333333333333]], "isOverall": false, "label": "POST Add New User-failure", "isController": false}, {"data": [[1.74886524E12, 20.35], [1.74886536E12, 47.53333333333333], [1.7488653E12, 32.7], [1.74886542E12, 3.2333333333333334]], "isOverall": false, "label": "Add New User-success", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74886542E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.74886524E12, "maxY": 94.96666666666667, "series": [{"data": [[1.74886524E12, 40.7], [1.74886536E12, 94.96666666666667], [1.7488653E12, 65.4], [1.74886542E12, 6.566666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74886524E12, 0.23333333333333334], [1.74886536E12, 0.5666666666666667], [1.7488653E12, 0.3], [1.74886542E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74886542E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

